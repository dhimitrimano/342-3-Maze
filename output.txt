Sun Nov  8 23:57:05 PST 2020
Linux csslab7.uwb.edu 3.10.0-1127.19.1.el7.x86_64 #1 SMP Tue Aug 25 17:23:54 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
uid=1091439(dhimitri) gid=2121091439(dhimitri) groups=2121091439(dhimitri),605559(lab-access)
=====================================================
1. Compiles without warnings with -Wall -Wextra flags
=====================================================
=====================================================
2. Runs and produces correct output
=====================================================
*** Solving maze0.txt
Path: NNNNNEEEEEEN
XXXXXXXXXXXXXXXXXX*X
X           *******X
X           *++++++X
X           *++++++X
X           *++++++X
X           *++++++X
XXXXXXXXXXXX*XXXXXXX


*** Solving maze1.txt
Path: NNWWWWWNNNEEEEEESEESSSEEENNNNN
XXXXXXXXXXXXXXXXXX*X
X     X*******XXXX*X
X XXXXX*XXXXX***XX*X
X XXXXX*XXXXXXX*XX*X
X X++++******XX*XX*X
X XXXXXXXXXX*XX****X
XXXXXXXXXXXX*XXXXXXX


*** Solving maze2.txt
Path: NEEEEEENNNNN
XXXXXXXXXXXXXXXXXX*X
X     X++++++XXXXX*X
X XXXXX+XXXX+X  XX*X
X XXXXX+XXXX+XX XX*X
X X++++++++X+XX XX*X
X XXXXXXXXXX*******X
XXXXXXXXXXXX*XXXXXXX


*** Solving maze3.txt
Failed to solve: maze3.txt
XXXXXXXXXXXXXXXXXX X
X+++++X++++++XXXXX X
X+X+X+X+X++X+X++XX X
X+X+XXX+XXXX+XX+XX X
X+X++++++++X+XX+XX X
X+XXXXXXXXXX+++++X X
XXXXXXXXXXXX+XXXXXXX


*** Solving badfile.txt
Unable to open file: badfile.txt
Failed to load badfile.txt
*** Solving maze4.txt
Path: WWWWWWWSSS
XXXXXXXXXXXXXXXXXXXX
X++++++++++XXXXXXXXX
X++++++++++XXXXXXXXX
X+++++++++++********
X++++++++++X*XXXXXXX
X++++++++++X*XXXXXXX
XXXXXXXXXXXX*XXXXXXX


*** Solving maze5.txt
Path: EEEEEEEEEEEEEEEEEESSSSWWWWWWS
XXXXXXXXXXXXXXXXXXXX
*******************X
X+++++++++++++++++*X
X+++++++++++++++++*X
X+++++++++++++++++*X
X+++++++++++*******X
XXXXXXXXXXXX*XXXXXXX


*** Solving maze6.txt
Path: SWWSSSSWWWWWWWWWWWWWWWW
XXXXXXXXXXXXXXXXXX*X
XXXXXXXXXXXXXXXX***X
XXXXXXXXXXXXXXXX* XX
X               *  X
X               *  X
*****************  X
XXXXXXXXXXXXXXXXXXXX


Done!
=====================================================
3. clang-tidy warnings are fixed
=====================================================
12013 warnings generated.
28084 warnings generated.
Suppressed 28084 warnings (28084 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
=====================================================
4. clang-format does not find any formatting issues
=====================================================
Running clang-format on ./main.cpp
Running clang-format on ./maze.cpp
=====================================================
5. No memory leaks using g++
=====================================================
=====================================================
6. No memory leaks using valgrind, look for "definitely lost" 
=====================================================
==27668== Memcheck, a memory error detector
==27668== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==27668== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==27668== Command: ./a.out maze0.txt maze1.txt maze2.txt maze3.txt badfile.txt
==27668== Parent PID: 27610
==27668== 
==27668== 
==27668== HEAP SUMMARY:
==27668==     in use at exit: 0 bytes in 0 blocks
==27668==   total heap usage: 114 allocs, 114 frees, 139,804 bytes allocated
==27668== 
==27668== All heap blocks were freed -- no leaks are possible
==27668== 
==27668== For lists of detected and suppressed errors, rerun with: -s
==27668== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Tests have full code coverage
=====================================================
Unable to open file: badfile.txt
Failed to load badfile.txt
File '/home/NETID/dhimitri/2020au342c-p3-maze-dhimitrimano/main.cpp':
Name                        Regions    Miss   Cover     Lines    Miss   Cover
-----------------------------------------------------------------------------
test(std::string const&)          7       0 100.00%        14       0 100.00%
main                              6       0 100.00%        13       0 100.00%
-----------------------------------------------------------------------------
TOTAL                            13       0 100.00%        27       0 100.00%

File '/home/NETID/dhimitri/2020au342c-p3-maze-dhimitrimano/maze.cpp':
Name                                     Regions    Miss   Cover     Lines    Miss   Cover
------------------------------------------------------------------------------------------
operator<<(std::ostream&, Maze const&)         7       0 100.00%        10       0 100.00%
Maze::Maze()                                   1       0 100.00%         1       0 100.00%
Maze::load(std::string const&)                 7       0 100.00%        19       0 100.00%
Maze::solve()                                  4       0 100.00%         6       0 100.00%
Maze::pathString(int)                         10       0 100.00%        12       0 100.00%
Maze::pathFinder(int, int, int)               30       0 100.00%        40       0 100.00%
Maze::getPath() const                          1       0 100.00%         1       0 100.00%
Maze::atExit(int, int) const                   3       0 100.00%         3       0 100.00%
Maze::atStart(int, int) const                  3       0 100.00%         3       0 100.00%
Maze::isInside(int, int) const                 7       0 100.00%         3       0 100.00%
Maze::isClear(int, int) const                  1       0 100.00%         4       0 100.00%
Maze::markAsPath(int, int)                     1       0 100.00%         4       0 100.00%
Maze::markAsVisited(int, int)                  1       0 100.00%         4       0 100.00%
------------------------------------------------------------------------------------------
TOTAL                                         76       0 100.00%       110       0 100.00%
/home/NETID/dhimitri/2020au342c-p3-maze-dhimitrimano/main.cpp:
    1|       |#include <iostream>
    2|       |
    3|       |#include "maze.h"
    4|       |
    5|       |using namespace std;
    6|       |
    7|      8|void test(const string &mazeFile) {
    8|      8|  Maze m;
    9|      8|  cout << "*** Solving " << mazeFile << endl;
   10|      8|  if (!m.load(mazeFile)) {
   11|      1|    cerr << "Failed to load " << mazeFile << endl;
   12|      1|    return;
   13|      1|  }
   14|      7|  if (m.solve()) {
   15|      6|    cout << "Path: " << m.getPath() << endl;
   16|      6|  } else {
   17|      1|    cout << "Failed to solve: " << mazeFile << endl;
   18|      1|  }
   19|      7|  cout << m << endl;
   20|      7|}
   21|       |
   22|       |// accepts multiple maze files from command line
   23|       |// ./a.out maze0.txt maze1.txt maze2.txt maze3.txt badfile.txt
   24|      1|int main(int argc, char *argv[]) {
   25|      1|  if (argc >= 1) {
   26|      6|    for (int i = 1; i < argc; ++i) {
   27|      5|      string mazeFile = argv[i];
   28|      5|      test(mazeFile);
   29|      5|    }
   30|      1|  }
   31|      1|  test("maze4.txt");
   32|      1|  test("maze5.txt");
   33|      1|  test("maze6.txt");
   34|      1|  cout << "Done!" << endl;
   35|      1|  return 0;
   36|      1|}

/home/NETID/dhimitri/2020au342c-p3-maze-dhimitrimano/maze.cpp:
    1|       |//
    2|       |// Created by Yusuf Pisan on 4/18/18.
    3|       |//
    4|       |
    5|       |#include "maze.h"
    6|       |#include <algorithm>
    7|       |#include <cassert>
    8|       |#include <climits>
    9|       |#include <fstream>
   10|       |#include <iostream>
   11|       |#include <sstream>
   12|       |
   13|       |using namespace std;
   14|       |
   15|       |// print maze object
   16|      7|ostream &operator<<(ostream &out, const Maze &maze) {
   17|     56|  for (int row = 0; row < maze.height; ++row) {
   18|  1.02k|    for (int col = 0; col < maze.width; ++col) {
   19|    980|      out << maze.field[row][col];
   20|    980|    }
   21|     49|    out << endl;
   22|     49|  }
   23|      7|  out << endl;
   24|      7|  return out;
   25|      7|}
   26|       |
   27|       |// default constructor
   28|      8|Maze::Maze() = default;
   29|       |
   30|       |// Load maze file from current directory
   31|      8|bool Maze::load(const string &fileName) {
   32|      8|  ifstream inFile;
   33|      8|  inFile.open(fileName);
   34|      8|  if (!inFile) {
   35|      1|    cerr << "Unable to open file: " << fileName << endl;
   36|      1|    return false;
   37|      1|  }
   38|      7|  inFile >> width >> height;
   39|      7|  inFile >> exitRow >> exitColumn;
   40|      7|  inFile >> startRow >> startColumn;
   41|      7|  // ignore leftover charcaters up to newline
   42|      7|  inFile.ignore(INT_MAX, '\n');
   43|      7|  string line;
   44|     56|  for (int row = 0; row < height; ++row) {
   45|     49|    getline(inFile, line);
   46|     49|    field.push_back(line);
   47|     49|  }
   48|      7|  return true;
   49|      7|}
   50|       |
   51|       |// true if maze can be solved
   52|      7|bool Maze::solve() {
   53|      7|  if (startRow == 0) {
   54|      1|    return pathFinder(2, startColumn, startRow);
   55|      1|  }
   56|      6|  return pathFinder(0, startColumn, startRow);
   57|      6|}
   58|       |
   59|    318|string Maze::pathString(int dir) {
   60|    318|  if (dir == 0) {
   61|     48|    return "N";
   62|     48|  }
   63|    270|  if (dir == 1) {
   64|    108|    return "E";
   65|    108|  }
   66|    162|  if (dir == 2) {
   67|     40|    return "S";
   68|     40|  }
   69|    122|  return "W";
   70|    122|}
   71|       |
   72|    763|bool Maze::pathFinder(int dir, int x, int y) {
   73|    763|  if (atExit(y, x)) {
   74|      6|    markAsPath(y, x);
   75|      6|    path.append(pathString(dir));
   76|      6|    return true;
   77|      6|  }
   78|    757|  if (isInside(y, x) && isClear(y, x)) {
   79|    319|    if (!atStart(y, x)) {
   80|    312|      path.append(pathString(dir));
   81|    312|    }
   82|    319|    markAsPath(y, x);
   83|    959|    for (int i = dir; i < dir + 4; i++) {
   84|    756|      int xChange = 0;
   85|    756|      int yChange = 0;
   86|    756|      if (i % 4 == 0) {
   87|    211|        yChange++;
   88|    211|      }
   89|    756|      if (i % 4 == 1) {
   90|    166|        xChange++;
   91|    166|      }
   92|    756|      if (i % 4 == 2) {
   93|    201|        yChange--;
   94|    201|      }
   95|    756|      if (i % 4 == 3) {
   96|    178|        xChange--;
   97|    178|      }
   98|    756|      if (pathFinder(i % 4, x + xChange, y - yChange)) {
   99|    116|        return true;
  100|    116|      }
  101|    640|      if (i % 4 == (dir + 1) % 4) {
  102|    213|        i++;
  103|    213|      }
  104|    640|    }
  105|    319|    markAsVisited(y, x);
  106|    203|    if (!atStart(y, x)) {
  107|    202|      path.erase(path.length() - 1, path.length());
  108|    202|    }
  109|    203|  }
  110|    757|  return false;
  111|    757|}
  112|       |
  113|       |// path to exit
  114|      6|string Maze::getPath() const { return path; }
  115|       |
  116|       |// true if row, column is the exit
  117|    763|bool Maze::atExit(int row, int column) const {
  118|    763|  return row == exitRow && column == exitColumn;
  119|    763|}
  120|       |
  121|    522|bool Maze::atStart(int row, int column) const {
  122|    522|  return row == startRow && column == startColumn;
  123|    522|}
  124|       |
  125|       |// true if row, column is inside the maze
  126|    757|bool Maze::isInside(int row, int col) const {
  127|    757|  return row >= 0 && col >= 0 && row < field.size() && col < field[row].size();
  128|    757|}
  129|       |
  130|       |// true if row, column is clear to move
  131|    756|bool Maze::isClear(int row, int col) const {
  132|    756|  assert(row >= 0 && col >= 0 && row < field.size() && col < field[row].size());
  133|    756|  return field[row][col] == CLEAR;
  134|    756|}
  135|       |
  136|       |// mark location as part of the path to exit
  137|    325|void Maze::markAsPath(int row, int col) {
  138|    325|  assert(row >= 0 && col >= 0 && row < field.size() && col < field[row].size());
  139|    325|  field[row][col] = PATH;
  140|    325|}
  141|       |
  142|       |// mark location as visited, not part of the path to exit
  143|    203|void Maze::markAsVisited(int row, int col) {
  144|    203|  assert(row >= 0 && col >= 0 && row < field.size() && col < field[row].size());
  145|    203|  field[row][col] = VISITED;
  146|    203|}

Sun Nov  8 23:57:20 PST 2020
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
